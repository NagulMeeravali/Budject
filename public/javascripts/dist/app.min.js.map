{"version":3,"sources":["charts.js","main.js"],"names":["loadItems","category","year","arguments","length","undefined","moment","startOf","format","axios","get","then","res","data","console","log","labels","Object","keys","values","budgeted","label","ctx","document","getElementById","backgroundColor","map","value","push","categoryChart","Chart","type","datasets","borderColor","borderWidth","options","title","display","text","charAt","toUpperCase","slice","legend","boxWidth","scales","xAxes","ticks","callback","tick","yAxes","beginAtZero","index","tooltips","enabled","mode","displayColors","callbacks","tooltipItem","this","_data","tooltipItems","yLabel","hover","onHover","e","style","cursor","onclick","evt","activePoints","getElementsAtEvent","firstPoint","_index","_datasetIndex","window","location","href","split","updateQueryStringParameter","uri","key","re","RegExp","separator","indexOf","match","replace","validateEmail","email","test","addAmountInputClass","parentElement","classList","add","removeAmountInputClass","remove","dashboardCategoryFilter","querySelector","addEventListener","mobileMenuIcon","preventDefault","toggle","formInputs","querySelectorAll","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","formInput","err","return","emailInputs","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","passwordInput","confirmPasswordInput","amountInput","budgetDetails","forEach","detail","parent","budgetSpentElement","budgetSpent","Number","textContent","budgetGoal","budgetClass"],"mappings":"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","file":"app.min.js","sourcesContent":["function loadItems(category, year = moment().startOf('year').format('YYYY')) {\n  axios.get(`/api/category/${category}?year=${year}`)\n    .then(res => {\n      const data = res.data;\n      console.log(data['sumByMonth'][year])\n      const labels = Object.keys(data['sumByMonth'][year]);\n      const values = Object.values(data['sumByMonth'][year]);\n      const budgeted = data['sumByMonth']['budgeted'];\n      const label = `Amount Spent Per Month â€” Budget: $${budgeted}`;\n\n      const ctx = document.getElementById(\"categoryChart\");\n\n      const backgroundColor = [];\n\n      values.map((value) => {\n        if (value <= budgeted) {\n          backgroundColor.push('#17B890');\n        } else {\n          backgroundColor.push('#DB504A')\n        }\n      })\n\n      const categoryChart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels,\n          datasets: [{\n            label,\n            data: values,\n            backgroundColor,\n            borderColor: backgroundColor,\n            borderWidth: 1\n          }]\n        },\n        options: {\n          title: {\n            display: true,\n            text: `${category.charAt(0).toUpperCase() + category.slice(1)} Spending for ${year}`\n          },\n          legend: {\n            labels: {\n              boxWidth: 0,\n            }\n          },\n          scales: {\n            xAxes: [{\n              ticks: {\n                callback: function(tick) {\n                  return moment(tick).format('MMM');\n                }\n              }\n            }],\n            yAxes: [{\n              ticks: {\n                beginAtZero: true,\n                callback: function(value, index, values) {\n                    return '$' + value;\n                }\n              }\n            }]\n          },\n          tooltips: {\n              enabled: true,\n              mode: 'single',\n              displayColors: false,\n              callbacks: {\n                  title: function(tooltipItem) { \n                    return moment(this._data.labels[tooltipItem[0].index]).format('MMMM');\n                  },\n                  label: function(tooltipItems, data) { \n                    return `$${tooltipItems.yLabel}`;\n                  }\n              }\n          },\n          hover: {\n            onHover: function(e) {\n              ctx.style.cursor = e[0] ? \"pointer\" : \"default\";\n            }\n          }\n        }\n      });\n\n      ctx.onclick = function(evt){\n        const activePoints = categoryChart.getElementsAtEvent(evt);\n        const firstPoint = activePoints[0];\n        const label = categoryChart.data.labels[firstPoint._index];\n        const value = categoryChart.data.datasets[firstPoint._datasetIndex].data[firstPoint._index];\n        if (firstPoint !== undefined)\n          window.location.href = `${window.location.href.split('?')[0]}?month=${label}&year=${year}`\n      };\n    })\n  }\n\n","/*jslint browser:true */\n\n(function () {\n  'use strict';\n\n  function updateQueryStringParameter(uri, key, value) {\n    var re = new RegExp(\"([?&])\" + key + \"=.*?(&|$)\", \"i\");\n    var separator = uri.indexOf('?') !== -1 ? \"&\" : \"?\";\n    if (uri.match(re)) {\n      return uri.replace(re, '$1' + key + \"=\" + value + '$2');\n    }\n    else {\n      return uri + separator + key + \"=\" + value;\n    }\n  }\n\n  const dashboardCategoryFilter = document.querySelector('select[name=category-type-filter]');\n  if (dashboardCategoryFilter) {\n    dashboardCategoryFilter.addEventListener('change', function(e) {\n      const sort = 'sort';\n      const value = this.value;\n      window.location.href = updateQueryStringParameter(window.location.href, sort, value);\n    });\n  }\n  \n  // Mobile Menu Toggle Functionality\n  const mobileMenuIcon = document.querySelector('.mobile-menu-toggle');\n\n  const mobileMenuToggle = function () {\n    mobileMenuIcon.addEventListener('click', function (e) {\n      e.preventDefault();\n      document.querySelector('body').classList.toggle('menu-open');\n    });\n  };\n\n  mobileMenuToggle();\n\n  // Add class to form input if input has value\n\n  const formInputs = [...document.querySelectorAll('input:not([type=submit]):not([type=date]), select, textarea')];\n  if (formInputs) {\n    for (const formInput of formInputs) {\n      if (formInput.value) {\n        formInput.classList.add('has-value');\n      }\n      \n      formInput.addEventListener('change', function(e) {\n        if (formInput.value) {\n          this.classList.add('has-value');\n        } else {\n          this.classList.remove('has-value');\n        }\n      })\n    }\n  }\n\n  // Add validation to email input as you type\n\n  function validateEmail(email) {\n    const emailValidation = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return emailValidation.test(email);\n  }\n\n  const emailInputs = [...document.querySelectorAll('input[type=email]')];\n  for (const emailInput of emailInputs) {\n    emailInput.addEventListener('keydown', function(e) {\n      if (validateEmail(this.value)) {\n        this.classList.remove('invalid-input');\n      } else {\n        this.classList.add('invalid-input');\n      }\n    });\n  }\n\n  // Add validation to password and confirm password fields as you type\n\n  const passwordInput = document.querySelector('input[name=password]');\n  const confirmPasswordInput = document.querySelector('input[name=confirm-password]');\n\n  if (passwordInput && confirmPasswordInput) {\n    confirmPasswordInput.addEventListener('keyup', function(e) {\n      if (this.value !== passwordInput.value) {\n        this.classList.add('invalid-input');\n      } else {\n        this.classList.remove('invalid-input');\n        this.classList.add('passwords-match');\n        passwordInput.classList.add('passwords-match');\n      }\n    });\n  }\n\n  // Add class to parent container when amount field is in focus\n  const amountInput = document.querySelector('.amount-field input');\n\n  function addAmountInputClass() {\n    this.parentElement.classList.add('active-element');\n  }\n\n  function removeAmountInputClass() {\n    if (this.value) {\n      return;\n    }\n    \n    this.parentElement.classList.remove('active-element');\n  }\n\n  if (amountInput) {\n    amountInput.addEventListener('focus', addAmountInputClass, true);\n    amountInput.addEventListener('blur', addAmountInputClass, true);\n    amountInput.addEventListener('focusout', removeAmountInputClass, true)\n  }\n\n  // Change color of budget spent number depending on if it exceeds or is lower than budget goal number\n\n  function changeBudgetColor() {\n    const budgetDetails = [...document.querySelectorAll('.budget-meta')];\n\n    if (budgetDetails) {\n      budgetDetails.forEach(detail => {\n        const parent = detail.parentElement.parentElement;\n        const budgetSpentElement = detail.querySelector('.budget-spent');\n        const budgetSpent = Number(budgetSpentElement.textContent.replace(/[^0-9\\.-]+/g, \"\"));\n        const budgetGoal = Number(detail.querySelector('.budget-goal').textContent.replace(/[^0-9\\.-]+/g, \"\"));\n        const budgetClass = budgetSpent > budgetGoal ? 'overspend' : 'underspend';\n\n        budgetSpentElement.classList.add(budgetClass);\n        parent.classList.add(budgetClass);\n      });\n    }\n  }\n  \n  changeBudgetColor();\n\n}());\n"]}